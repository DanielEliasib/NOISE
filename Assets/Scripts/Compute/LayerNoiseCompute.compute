// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel NoiseGenerator

#include "kj/SimplexNoise3D.hlsl"
#include "kj/BCCNoise8.hlsl"

StructuredBuffer<float3> _Colors;

RWTexture2DArray<float4> _TexArray;

int levels;
int numberOfColors;

float _Frecuency1;
float _Frecuency2;

float2 _Offset1, _Offset2;

[numthreads(8, 8, 1)]
void NoiseGenerator(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float noise =
        dot(
            snoise_grad((id + float3(0, _Offset1)) / _Frecuency1).xyz,
            snoise_grad((id + float3(_Offset2, 0)) / _Frecuency2).xyz
            );
    
    //Remap noise. I think dot(noise, noise) give us at most 1*1 + 1*1 + 1*1 = 3, and at least -1*1 -1*1 -1*1 = -3
    //So I remap [-3,3] to [0, 1]
    noise = noise / 6.0f + 0.5f;
    
    float step = 1.0f / levels;
    
    for (int i = 0; i < levels; i++)
    {
        if ((i + 1) * step >= noise)
        {
            int currentColor = (int) (i * step * numberOfColors);
            
            float3 color = lerp(_Colors[currentColor], _Colors[currentColor + 1], i * step * numberOfColors - currentColor);
            
            _TexArray[uint3(id.xy, i)] = float4(color, 1.0f);
        }
        else
        {
            _TexArray[uint3(id.xy, i)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        }
    }
}



