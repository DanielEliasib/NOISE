// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel NoiseGenerator

#include "kj/SimplexNoise3D.hlsl"
#include "kj/BCCNoise8.hlsl"

StructuredBuffer<float3> _Colors;

// x:vel, y:lambda, z:k, w:w
StructuredBuffer<float4> _WaveData;
// x:A, y:a, z:f, w:time shift
StructuredBuffer<float4> _AFData;

RWTexture2DArray<float4> _TexArray;

int levels;
int numberOfColors;
int numberOfWaves;

float _Frecuency1;
float _Frecuency2;

float2 _Offset1, _Offset2;

float _Time;

const float PI = 3.1415926535897932384626f;

float A(float t, float amp, float par)
{
    return amp / exp(par*t);
}

float WaveProcessor(float t, float r)
{
    float wave = 0;
    for (int i = 0; i < numberOfWaves; i++)
    {
        float _CurrentTime = t - _AFData[i].w;
        
        float temp = A(_CurrentTime,
                        _AFData[i].x,
                        _AFData[i].y);
        
        temp = temp * cos(_WaveData[i].z * r - _WaveData[i].w * _CurrentTime) + _AFData[i].x*0.5f;
        
        temp = temp * (abs(_WaveData[i].x * _CurrentTime - r) <= _WaveData[i].y * 0.5f);
        
        wave += temp;
    }
    
    return clamp(wave, 0, 1);
}

[numthreads(8, 8, 1)]
void NoiseGenerator(uint3 id : SV_DispatchThreadID)
{
    float step = (1.0f) / (levels);
    
    uint3 wavePoint = id - int3(256 / 2, 256 / 2, 0);

    float wRad = sqrt(wavePoint.x * wavePoint.x + wavePoint.y * wavePoint.y);
    
    float noise =
        dot(
            snoise_grad((id*3 + float3(0, _Offset1)) / _Frecuency1).xyz,
            snoise_grad((id*3 + float3(_Offset2, 0)) / _Frecuency2).xyz
            );
    //float noise = 0;
    
    //Remap noise. I think dot(noise, noise) give us at most 1*1 + 1*1 + 1*1 = 3, and at least -1*1 -1*1 -1*1 = -3
    //So I remap [-3,3] to [0, 1]
    noise = (noise / 15.0f + 0.5f) * 0.4f;
    noise += WaveProcessor(_Time, wRad);
    
    for (int i = 0; i < levels; i++)
    {
        int currentColor = (int)(i * step * (numberOfColors - 1));

        float3 color = lerp(_Colors[currentColor], _Colors[currentColor + 1], i * step * numberOfColors - currentColor);

        if ((i + 1) * step <= noise)
        {
            _TexArray[uint3(id.xy, i)] = float4(color, 1.0f);
        }
        else
        {
            _TexArray[uint3(id.xy, i)] = float4(color, 0.0f);
        }
        
        
    }
}



